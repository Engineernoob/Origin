apiVersion: apps/v1
kind: Deployment
metadata:
  name: origin-backend
  namespace: origin-production
  labels:
    app: origin-backend
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: origin-backend
  template:
    metadata:
      labels:
        app: origin-backend
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "3000"
        prometheus.io/scheme: "http"
    spec:
      serviceAccountName: origin-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: origin-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: origin-backend-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: origin-backend-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: DB_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: DB_PASS
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: REDIS_PASSWORD
        - name: ELASTICSEARCH_HOST
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: ELASTICSEARCH_HOST
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: JWT_SECRET
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: GOOGLE_CLIENT_SECRET
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: S3_VIDEOS_BUCKET
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: S3_VIDEOS_BUCKET
        - name: S3_THUMBNAILS_BUCKET
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: S3_THUMBNAILS_BUCKET
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: origin-secrets
              key: SENTRY_DSN
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: origin-backend-config
              key: FRONTEND_URL
        - name: MAX_FILE_SIZE
          valueFrom:
            configMapKeyRef:
              name: origin-backend-config
              key: MAX_FILE_SIZE
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: origin-uploads-pvc
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      imagePullSecrets:
      - name: regcred
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - origin-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: origin-backend
  namespace: origin-production
  labels:
    app: origin-backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "3000"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: origin-backend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: origin-backend
  namespace: origin-production
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: origin-backend-hpa
  namespace: origin-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: origin-backend
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: origin-backend-pdb
  namespace: origin-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: origin-backend
