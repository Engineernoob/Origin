name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Container Image Security Scanning
  container-security:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.REGISTRY_URL }}/origin-backend:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # CodeQL Analysis
  codeql:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Dependency Security Scan
  dependency-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd origin-${{ matrix.component }}
        npm ci

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      with:
        args: --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: origin-${{ matrix.component }}

    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # Infrastructure as Code Security
  iac-security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -diff
      working-directory: infrastructure/terraform

    - name: Terraform init
      run: terraform init
      working-directory: infrastructure/terraform

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Secrets Detection
  secrets-detection:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # API Security Testing
  api-security:
    runs-on: ubuntu-latest
    needs: [container-security, codeql, dependency-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://api.staging.origin.example.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      env:
        ZAP_API_KEY: ${{ secrets.ZAP_API_KEY }}

  # Generate Security Report
  security-report:
    runs-on: ubuntu-latest
    needs: [container-security, codeql, dependency-scan, iac-security, secrets-detection, api-security]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Container Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL Analysis: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Scan: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- IaC Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- Secrets Detection: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- API Security: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All security scans completed successfully!" >> $GITHUB_STEP_SUMMARY

    - name: Create security report
      if: failure()
      run: |
        echo "Security report generation for failed scans..."
        # Generate detailed security report here

    - length:600
      name: Upload security report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.txt
